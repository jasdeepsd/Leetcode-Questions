You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Code:

   ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL && l2 == NULL){
            return l1; 
        }
        else if(l1 == NULL){
            return l2; 
        }else if(l2 == NULL){
            return l1; 
        }
       
        ListNode* head = NULL; 
        ListNode* tail = NULL; 
       
        if(l1->val < l2->val){
            head = l1; 
            tail = l1; 
            l1 = l1->next; 
        }
        else{
            head = l2; 
            tail = l2; 
            l2 = l2->next; 
        }
       
        while(l1 != NULL && l2 != NULL){
            if(l1->val < l2->val){
                tail->next = l1; 
                l1 = l1->next; 
            }
            else{
                tail->next = l2; 
                l2 = l2->next; 
            }
            
            tail = tail->next; 
        }
       
        if(l1 != NULL){
            tail->next = l1; 
        }
       
        if(l2 != NULL){
            tail->next = l2; 
        }
       
        return head; 
    }
    
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       if (lists.size() == 0)
           return NULL; 
        
        ListNode* head = lists[0]; 
        
        for(int i =1; i < lists.size(); i++){
            head = mergeTwoLists(head, lists[i]); 
        }
        
        return head; 
    }
