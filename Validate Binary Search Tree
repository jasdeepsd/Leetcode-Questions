Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Code:
     bool validate(TreeNode *root, int *max,int *min){
        if(root == NULL){
            return true;
        }else if(max!=NULL && root->val>= *max || min!=NULL && root->val <= *min){
            return false;
        }else{
            return validate(root->left,&(root->val),min) && validate(root->right,max,&(root->val));
        }
    }
    
    bool isValidBST(TreeNode* root) {
        return validate(root,NULL,NULL);
    }
