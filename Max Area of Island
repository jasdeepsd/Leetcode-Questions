
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.


Code: if can modify original grid 
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        int maxArea =0; 
        
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(grid[i][j] == 1){
                    maxArea = max(maxArea, areaIslandDFS(grid, i, j)); 
                }
            }    
        }
        
        return maxArea; 
    }
    
    int areaIslandDFS(vector<vector<int>>& grid, int i, int j){
        if(i >= grid.size() || i < 0 || j < 0 || j >= grid[0].size() || grid[i][j] == 0)
            return 0; 
        
        grid[i][j] = 0;
        
        return 1 +  areaIslandDFS(grid,i-1,j) + areaIslandDFS(grid,i+1,j) + areaIslandDFS(grid,i,j-1) + areaIslandDFS(grid,i,j+1); 
        
    }
    
    Code : using extra space if cant modify 
     vector<vector<bool>> seen; 
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int maxArea =0; 
        seen = vector<vector<bool>>(grid.size(),vector<bool>(grid[0].size()));
     
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                    maxArea = max(maxArea, areaIslandDFS(grid,i,j)); 
            }    
        }
        
        return maxArea; 
    }
    
    int areaIslandDFS(vector<vector<int>>& grid, int i, int j){
        if(i >= grid.size() || i < 0 || j < 0 || j >= grid[0].size() || grid[i][j] == 0 || seen[i][j])
            return 0; 
        
        seen[i][j] = true;
        
        return 1 +  areaIslandDFS(grid,i-1,j) + areaIslandDFS(grid,i+1,j) + areaIslandDFS(grid,i,j-1) + areaIslandDFS(grid,i,j+1); 
        
    }
