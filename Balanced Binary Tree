Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.


Code:

    bool isBalanced(TreeNode* root) {
         return isBalancedTreeHelper(root); 
    }
    
    bool isBalancedTreeHelper(TreeNode* node){
        if(node == NULL)
            return true; 
        
        int leftHeight = getHeight(node->left); 
        int rightHeight = getHeight(node->right); 
        
        if(abs(leftHeight - rightHeight) <= 1 && isBalancedTreeHelper(node->left) && isBalancedTreeHelper(node->right))
            return true; 
        
        return false; 
    }
    
    
    int getHeight(TreeNode* node){
        if (node == NULL)
            return 0;
        
        int leftHeight = getHeight(node->left); 
        int rightHeight = getHeight(node->right); 
        
        return 1 + max(leftHeight, rightHeight); 
    }
